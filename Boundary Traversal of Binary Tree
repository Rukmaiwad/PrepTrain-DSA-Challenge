'''
    Time Complexity: O(N)
    Space Complexity: O(N)

    Where N is the number of nodes in the Binary Tree.
'''

# Binary tree node class for reference.
# class BinaryTreeNode:
#     def __init__(self, data):
#         self.data = data
#         self.left = None
#         self.right = None


# Functions to traverse on each part.
def traverseBoundary(root):
    if root is None:
        return []
    
    def leaf(node,ans):
        if node is None:
            return
        leaf(node.left,ans)
        if node.left is None and node.right is None:
            ans.append(node.data)
        leaf(node.right,ans)

    
    def left(node,ans):
        if node is None:
            return
        if node.left:
            ans.append(node.data)
            left(node.left,ans)
        elif node.right:
            ans.append(node.data)
            left(node.right,ans)
    
    def right(node,ans):
        if node is None:
            return
        if node.right:
            right(node.right,ans)

            ans.append(node.data)
        elif node.left:
            right(node.left,ans)
            ans.append(node.data)

    ans=[]
    ans.append(root.data)
    left(root.left,ans)
    leaf(root,ans)
    right(root.right,ans)
    return ans

    
    pass
